import { SSDP_HEADER, SSDP_MESSAGE } from "./SSDP";
import { Service, ServiceJSON } from "./Service";
import { Observable } from "@reactivex/rxjs/dist/package/Observable";
import { CALL_RESULT } from "./ServiceAction";
export declare const obsDeviceAppears: Observable<Device>;
export declare const obsDeviceDisppears: Observable<Device>;
export declare type CALL = {
    serviceId: string;
    actionName: string;
    args: Object;
};
export declare type ICON = {
    mimetype: string;
    width: number;
    height: number;
    depth: number;
    url: string;
};
export declare type SERVICE_EVENT = {
    serviceId: string;
    properties: Object;
};
export declare type CB_SERVICE_EVENT = (evt: SERVICE_EVENT) => void;
export declare type DeviceJSON = {
    USN: string;
    headers: SSDP_HEADER;
    iconList: ICON[];
    deviceType: string;
    friendlyName: string;
    manufacturer: string;
    manufacturerURL: string;
    modelDescription: string;
    modelName: string;
    modelURL: string;
    modelNumber: string;
    serialNumber: string;
    services: ServiceJSON[];
    baseURL: string;
    host: string;
    port: string;
};
export declare class Device {
    private removeDelay;
    private USN;
    private headers;
    private iconList;
    private deviceType;
    private friendlyName;
    private manufacturer;
    private manufacturerURL;
    private modelDescription;
    private modelName;
    private modelURL;
    private modelNumber;
    private serialNumber;
    private raw;
    private promiseDetails;
    private services;
    private baseURL;
    private host;
    private port;
    constructor(msg: SSDP_MESSAGE);
    dispose(): void;
    findServiceFromType(type: string): Service;
    getServices(): Service[];
    getType(): string;
    getUSN(): string;
    toJSON(): DeviceJSON;
    updateRemoveDelay(nbSeconds: number): void;
    call(C: CALL): Promise<CALL_RESULT>;
    getDescription(): Promise<this>;
    private getDeviceDetails();
}
export declare function createDevice(msg: SSDP_MESSAGE): void;
export declare function removeDevice(msg: SSDP_MESSAGE): void;
export declare function updateDevice(msg: SSDP_MESSAGE): void;
export declare function getDeviceFromUUID(uuid: string): Device;
export declare function getDevices(filter?: (d: Device) => boolean): Device[];
